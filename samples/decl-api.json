{
  "openapi": "3.1.1",
  "info": {
    "title": "Alchemy Lab API",
    "version": "1.0.0"
  },
  "components": {
    "schemas": {
      "AlchemistsPage": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Oaskit.TestWeb.Schemas.Alchemist"
            },
            "type": "array"
          }
        },
        "required": [
          "data"
        ],
        "type": "object"
      },
      "CreatePotionBody": {
        "properties": {
          "ingredients": {
            "items": {
              "$ref": "#/components/schemas/Ingredient"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "ingredients"
        ],
        "type": "object"
      },
      "Ingredient": {
        "properties": {
          "name": {
            "type": "string"
          },
          "quantity": {
            "type": "integer"
          },
          "unit": {
            "enum": [
              "pinch",
              "dash",
              "scoop",
              "whiff",
              "nub"
            ],
            "type": "string"
          }
        },
        "required": [
          "name",
          "quantity",
          "unit"
        ],
        "type": "object"
      },
      "JSV:KeywordError": {
        "title": "JSV:KeywordError",
        "additionalProperties": false,
        "description": "Represents an returned by a single keyword like `type` or `required`, or a combination of keywords like `if` and `else`. Such annotations can contain nested error units, for instance `oneOf` may contain errors units for all subschemas when no subschema listed in `oneOf` did match the input value. The list of possible values includes",
        "properties": {
          "details": {
            "items": {
              "$ref": "#/components/schemas/JSV:ValidationUnit"
            },
            "type": "array"
          },
          "kind": {
            "description": "The keyword or internal operation that invalidated the data, like \"type\", or a combination like \"if/else\". Custom vocabularies can create their own kinds over the built-in ones.",
            "type": "string"
          },
          "message": {
            "description": "An error message related to the invalidating keyword",
            "type": "string"
          }
        },
        "required": [
          "kind",
          "message"
        ],
        "type": "object"
      },
      "JSV:ValidationError": {
        "title": "JSV:ValidationError",
        "additionalProperties": false,
        "description": "This represents a normalized `JSV.ValidationError` in a JSON-encodable way. It contains a list of error units.",
        "properties": {
          "details": {
            "items": {
              "$ref": "#/components/schemas/JSV:ValidationUnit"
            },
            "type": "array"
          },
          "valid": {
            "const": false
          }
        },
        "required": [
          "valid"
        ],
        "type": "object"
      },
      "JSV:ValidationUnit": {
        "title": "JSV:ValidationUnit",
        "additionalProperties": false,
        "description": "Describes all errors found at given instanceLocation raised by the same sub-schema (same schemaLocation and evaluationPath). It may also represent a positive validation result, (when `valid` is `true`) needed when for instance multiple schemas under `oneOf` validates the input sucessfully.",
        "properties": {
          "errors": {
            "items": {
              "$ref": "#/components/schemas/JSV:KeywordError"
            },
            "type": "array"
          },
          "evaluationPath": {
            "description": "A JSON path pointing to the part of the schema that invalidated the data, but going through all indirections like $ref within the schema, starting from the root schema.",
            "type": "string"
          },
          "instanceLocation": {
            "description": "A JSON path pointing to the invalid part in the input data.",
            "type": "string"
          },
          "schemaLocation": {
            "description": "A JSON path pointing to the part of the schema that invalidated the data.",
            "type": "string"
          },
          "valid": {
            "type": "boolean"
          }
        },
        "required": [
          "valid"
        ],
        "type": "object"
      },
      "LaboratorySlug": {
        "pattern": "[a-zA-Z0-9_-]",
        "type": "string"
      },
      "Oaskit.TestWeb.Schemas.Alchemist": {
        "properties": {
          "name": {
            "type": "string"
          },
          "titles": {
            "items": {
              "type": "string"
            },
            "type": "array"
          }
        },
        "required": [
          "name",
          "titles"
        ],
        "type": "object"
      },
      "Oaskit:BadRequestError": {
        "title": "Oaskit:BadRequestError",
        "properties": {
          "kind": {
            "const": "bad_request"
          },
          "parameters_errors": {
            "items": {
              "oneOf": [
                {
                  "properties": {
                    "kind": {
                      "const": "invalid_parameter"
                    },
                    "validation_error": {
                      "$ref": "#/components/schemas/JSV:ValidationError"
                    }
                  },
                  "required": [
                    "validation_error"
                  ]
                },
                {
                  "properties": {
                    "kind": {
                      "const": "missing_parameter"
                    }
                  }
                }
              ],
              "properties": {
                "in": {
                  "enum": [
                    "query",
                    "path"
                  ]
                },
                "kind": {
                  "enum": [
                    "invalid_parameter",
                    "missing_parameter"
                  ]
                },
                "message": {
                  "type": "string"
                },
                "parameter": {
                  "type": "string"
                }
              },
              "required": [
                "in",
                "message",
                "parameter"
              ],
              "type": "object"
            },
            "type": "array"
          }
        },
        "required": [
          "parameters_errors"
        ],
        "type": "object"
      },
      "Oaskit:Error": {
        "title": "Oaskit:Error",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Oaskit:UnprocessableEntityError"
          },
          {
            "$ref": "#/components/schemas/Oaskit:UnsupportedMediaTypeError"
          },
          {
            "$ref": "#/components/schemas/Oaskit:BadRequestError"
          }
        ],
        "properties": {
          "in": {
            "enum": [
              "body",
              "parameters"
            ]
          },
          "kind": {
            "enum": [
              "unprocessable_entity",
              "unsupported_media_type",
              "bad_request"
            ]
          },
          "message": {
            "type": "string"
          },
          "operation_id": {
            "description": "The ID of the operation that could not be executed",
            "type": "string"
          }
        },
        "required": [
          "in",
          "kind",
          "message",
          "operation_id"
        ],
        "type": "object"
      },
      "Oaskit:ErrorResponse": {
        "title": "Oaskit:ErrorResponse",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/Oaskit:Error"
          }
        },
        "required": [
          "error"
        ],
        "type": "object"
      },
      "Oaskit:UnprocessableEntityError": {
        "title": "Oaskit:UnprocessableEntityError",
        "properties": {
          "kind": {
            "const": "unprocessable_entity"
          },
          "validation_error": {
            "$ref": "#/components/schemas/JSV:ValidationError"
          }
        },
        "required": [
          "validation_error"
        ],
        "type": "object"
      },
      "Oaskit:UnsupportedMediaTypeError": {
        "title": "Oaskit:UnsupportedMediaTypeError",
        "properties": {
          "kind": {
            "const": "unsupported_media_type"
          },
          "media_type": {
            "type": "string"
          }
        },
        "required": [
          "media_type"
        ],
        "type": "object"
      },
      "Potion": {
        "properties": {
          "brewingTime": {
            "type": "integer"
          },
          "id": {
            "type": "string"
          },
          "ingredients": {
            "items": {
              "$ref": "#/components/schemas/Ingredient"
            },
            "type": "array"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "name",
          "ingredients"
        ],
        "type": "object"
      }
    },
    "responses": {
      "AlchemistsPage": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/AlchemistsPage"
            }
          }
        },
        "description": "Page of Alchemists listing"
      },
      "BadRequest": {
        "content": {
          "application/json": {
            "schema": true
          }
        },
        "description": "Bad request"
      },
      "ErrErrErr": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Oaskit:ErrorResponse"
            }
          }
        },
        "description": "response with error schema from OASKit"
      },
      "PotionCreated": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Potion"
            }
          }
        },
        "description": "Potion created successfully"
      }
    },
    "parameters": {
      "DryRun": {
        "in": "query",
        "name": "dry_run",
        "schema": {
          "type": "boolean"
        }
      },
      "LaboratorySlug": {
        "in": "path",
        "name": "lab",
        "schema": {
          "$ref": "#/components/parameters/LaboratorySlug"
        }
      },
      "Page": {
        "in": "query",
        "name": "page",
        "schema": {
          "minimum": 1,
          "type": "integer"
        }
      },
      "PerPage": {
        "in": "query",
        "name": "per_page",
        "schema": {
          "minimum": 1,
          "type": "integer"
        }
      },
      "Q": {
        "in": "query",
        "name": "q",
        "schema": {
          "minLength": 1,
          "type": "string"
        }
      },
      "Source": {
        "in": "query",
        "name": "source",
        "schema": {
          "type": "string"
        }
      }
    },
    "pathItems": {
      "AlchemistsPath": {
        "get": {
          "responses": {
            "200": {
              "$ref": "#/components/responses/AlchemistsPage"
            },
            "400": {
              "$ref": "#/components/responses/BadRequest"
            },
            "default": {
              "$ref": "#/components/responses/ErrErrErr"
            }
          },
          "operationId": "listAlchemists",
          "parameters": [
            {
              "$ref": "#/components/parameters/PerPage"
            },
            {
              "$ref": "#/components/parameters/Page"
            }
          ]
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/LaboratorySlug"
          },
          {
            "$ref": "#/components/parameters/Q"
          }
        ],
        "post": {
          "responses": {
            "200": {
              "$ref": "#/components/responses/AlchemistsPage"
            },
            "default": {
              "$ref": "#/components/responses/ErrErrErr"
            }
          },
          "operationId": "searchAlchemists",
          "parameters": [
            {
              "in": "query",
              "name": "q",
              "schema": {
                "minLength": 0,
                "type": "string"
              }
            },
            {
              "in": "query",
              "name": "lab",
              "schema": {
                "pattern": "^someprefix:[a-z]+",
                "type": "string"
              }
            }
          ]
        }
      },
      "CreatePotionPath": {
        "post": {
          "responses": {
            "200": {
              "$ref": "#/components/responses/PotionCreated"
            },
            "default": {
              "$ref": "#/components/responses/ErrErrErr"
            }
          },
          "operationId": "createPotion",
          "parameters": [
            {
              "$ref": "#/components/parameters/DryRun"
            },
            {
              "$ref": "#/components/parameters/Source"
            }
          ],
          "requestBody": {
            "$ref": "#/components/requestBodies/CreatePotionRequest"
          }
        }
      }
    },
    "requestBodies": {
      "CreatePotionRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/CreatePotionBody"
            }
          }
        },
        "required": true
      }
    }
  },
  "paths": {
    "/potions": {
      "$ref": "#/components/pathItems/CreatePotionPath"
    },
    "/{lab}/alchemists": {
      "$ref": "#/components/pathItems/AlchemistsPath"
    }
  }
}